[23/05/16]

---[질문]---
- 함수의 파라미터로 배열을 넣어주면 일반 변수를 넣어줄때와는 달리 원본이 들어간다.
	변수를 넣어줄 땐 값이 복사되어 들어갈뿐이라 원본을 수정할 수 없다.
	하지만 배열을 넣어줄땐 주소가 들어가기에 원본을 수정할 수 있다.
- int arr[5] = {}; 라는 배열이 있을 때...
	arr == &arr[0]
	즉, 배열의 이름은 해당 배열의 첫번째 인자의 주소와 동일하다.
- 책에는 안 나와있지만... 아래와 같이 파라미터를 설정해줄 수 있다.
	void Sample(int A[5])
	{
		for (int i = 0; i < 5; ++i)
			cout << A[i] << " ";
	}

	int main(void)
	{
		int arr[5] = {1,2,3,4,5};
		Sample(arr);	// 1 2 3 4 5
		return 0;
	}
	

---[1교시]---

[문자열]
- 지금까지 했던건 문자하나였다.
- 문자열은 두글자 이상을 뜻한다.
	ex) 
	char vect[256] = {'H', 'e', 'l', 'l', 'o'};
	char str[256] = "Hello";
- 단, 위의 두 경우에 차이점이 있다.
	1번의 경우 char형 5칸만 있으면 되지만, 2번의 경우 6칸이 있어야한다.
- 1번의 경우 문자열이 아니라 char형 배열이다.
- 2번의 경우 마지막에 '0(nul문자, \0)'이 들어간다.
	0이 들어가는 이유는 컴퓨터에게 문자열의 끝을 알려주기 위함이다.
- 메모리를 할당했다가 해제하면 해당 메모리가 0으로 초기화 되지 않고 넣어줬던 값들이 그래도 남아 쓰레기값이 된다.


---[2교시]---

[return]
- 한개의 값만을 반환할 수 있다는 한계가 있다.

* stride = 보폭, 큰 걸음으로 걷다.

[이차원배열을 인자로...]
- ex)
void test(int (*pointer)[3])	// 2중포인터 사용하면 안된다. 
								// '포인터 배열'을 사용한다.
{
	// logic
}
int main(void)
{
	int arr[2][3] = {};
	test(arr);
}
- 그냥 "int (*ptr)[3]" 대신에 "int arr[2][3]" 사용하자
