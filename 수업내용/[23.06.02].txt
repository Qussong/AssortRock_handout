[23/06/02]

---[질문]---

---[1교시]---

[스택]

- 구현하는 방법
	1. 리스트 (수업시간 사용한 방식)
	2. 배열

[객체지향 프로그래밍]

-	Oriented Object Programming

-	절차지향 프로그래밍이 나쁜건 아니다.
	간단한 프로그램은 절차지향으로 만드는게
	더 빠르게 해결 할 수 있다.
	ex) 배열
	
- 	옛날 책들을 보면 변수가 먼저 나온다.
	하지만 요즘 트랜드는 함수를 위에 만든다.
	왠만하면 강사님 스타일을 따라가자
	(최신 트랜드 : 함수가 위에 위치)
	
- 	일반적으로 객체지향 프로그래밍을 검색하면
	'데이터 중심'이라고 나온다.
	하지만 클래스를 설계할 때 함수 위주로 생각해야한다.
	때문에 최근 트랜드는 함수를 클래스 내부에서 위에 위치시킨다.
	(기능위주, 중요한건 함수[기능])

-	디자인 패턴을 따로 공부할 필요가 없다고 생각한다.
	하다보면 어느순간 알게된다.
	
-	일반적으로 패턴의 필요성은 개발자가 추상화 수준이 부족하거나
	기능적으로 부족한 언어를 사용할 때 발생하게 된다.
	
-	강사님曰
	디자인 패턴을 공부해버리면 창의성이 사라지게된다.
	지금은 공부하지 마라

---[2교시]---

[큐]

- 구현방법
	1. 리스트
	2. 배열 (수업시간 사용한 방식)
	
- 템플릿 클래스로 구현해본다.


[링크드 리스트]

-	Node 삭제 기능 구현
	DeleteNode(data)

[그래프]

-	트리와 그래프의 차이
	아래 노드로 내려가면 다시 위로 올라가지 못하는게 '트리'
	만약 되돌아갈 수 있다면 '그래프'
	즉, 트리는 그래프 안에 포함되어 있다.
	
-	배열 : 

-	리스트 : 
	노드들끼리 서로의 주소를 포인터변수에 저장하여 

-	그래프/트리 : 
	노드 값 및 노드들끼리 관계를 저장한 자료구조
	탐색방법 -> DFS(재귀함수), BFS(큐 자료구조를 아용하여 탐색)
	ex) 지하철노선, 네트워크
	
-	간단하게 문제 푸는 방법만 알아봄
	제대로 구현은 하지 않았다.