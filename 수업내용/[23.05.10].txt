23.05.10

[형변환]_char
- char test = 'A';
	실제론 65 라는 숫자값이 들어간다.
	cout << test;	// A
	(int)test 를 해주면 65가 반환된다.
	cout << (int)test 	// 65
- 단, char -> int 로 갈땐 문제가 안되지만
	int -> char 로 갈땐 큰데이터가 작은데이터로 형변환을 하는것이기에
	데이터가 유실될 수 있다.

[loop2_while문]
- 형태 :
	while (조건)	// 조건이 true인 동안은 계속 반복한다.
	{
		증감식
	}
- ex)
	int i = 0;
	while(i<10)
	{
		i++;
	}
- while문은 통상적으로 언제 끝날지 모르는 작업을 반복하 때 사용한다.
- for문은 몇번 반복하지 횟수를 아는 작업을 반복할 때 사용한다.
- while문은 구조가 단순하며, 안팎으로 조건을 적어줘야 한다.

[break]
- 가장 가까운 반복문을 빠져나간다.
- 반복문 : for, while

[swap]
- 변수 2개가 서로를 바꿔주는 로직
- 임시변수를 생성해서 값을 저장해두고 교환해준다.
- 포인터 배울때 활용할듯

[struct]
- 아직까진 배운내용만 가지곤 내가 원하는걸 전부 표현하기엔 무리가 있다.
- 변수만 선언하기엔 여러 이유로 무리가 있다.
	ex)
	플레이어1(hp,mp,att,def)
	플레이어2(hp,mp,att,def)
	...
- 사용자 정의 자료형
- 구조체
- 형태 : 
	struct 구조체명
	{
		// 정보
	};
- ex)
	struct Player
	{
		int hp;		// 체력
		int mp;		// 마나
		int att;	// 공격력
		int def;	// 방어력
		
	}

	int main(void)
	{
		Player warrior;
		Player archer;
		Plater magicion;
		
		warrior.hp = 100;
		archer.hp = 80;
		magicion.hp = 60;
		
		return 0;
	}
- 장점 : 
	데이터를 묶어서 관리할 수 있다.
	여러개의 변수들을 묶음형태로 그룹화 하고 싶을 때
	특정 상황에서 소스코드를 보다 간결하게 표현할 수 있다.
	차후에 자료구조 및 알고리즘을 배울 때 구조체,클래스(이 둘은 같다)가 사용되는데
		이를 위해 
	가독성이 좋아진다.
	
[class]
- 구조체와 동일하다.
- 형태 : 
class Player
{
//public:	// 기본값 private, public 으로 지정해줘야 외부에서 접근 할 수 있다.
	int hp;		// 체력
	int mp;		// 마나
	int att;	// 공격력
	int def;	// 방어력
	
}
- 구조체와의 차이점 : 접근 제한 지정자
	구조체의 경우 접근 제한 지정자의 기본값이 public 
	클래스의 경우 접근 제한 지정자의 기본값이 private

- 구조체와 클래스의 차이점이 접근제한자를 제외하곤 없다.
	때문에 뭘 사용하든 상관은 없지만 적절할 사용처가 나뉘긴 한다.
	struct : 데이터를 쉽게 접근해야할 때
	class : 데이터에 쉽게 접근했을 때 문제가 되는 경우
		
------------------------------------------------

[실행분기]_fucntion
f10,f11로 실행시킬 때 호출스택을 보면 현재 실행중인 함수의 위치를 알 수 있다.
전체 내역을 확인할 수 없다.
현재 함수까지 어디서 어떻게 들어왔는지만 알 수 있다.

[인자]_function
- ex)
	int func(int a, int b)	// a,b : 전달인자
	{
		int tmep = 0;
		temp = a + b;
		return temp;
	}
	
	main(void)
	{
		int a = 1, b = 2;
		int c = func(a, b);
		// main()의 a,b 와 func()의 a,b 는 별개의 변수들이다.
		// 이름은 같으나 동일한 변수들이 아니다.
		// 각각 main(), func()의 지역변수들이다.
		// 헷갈리지 않게 이름을 다르게 지어주면 헷갈림을 방지할 수 있다.
		// 얕은 복사, call by value (큰 의미는 없다, 그냥 헷갈리게 만든다.)
		return 0;
	}
- 지역변수, 파라미터로 만들어진 변수들의 이름은 소문자로 만들어준다.