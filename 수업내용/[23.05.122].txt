[23/05/22]

---[질문시간]---


---[1교시]---

[재귀함수]
추상적
확시랗게 눈에 보이지 않는다.
일반적인 함수를 호출했을 때랑 전혀 다른점이 없다.

배워야 하는이유 : 
추상적인(형태가 확실하지 않은) 내용을 코드로 옮긴다고 과정했을 때 제일 복잡한 독해력 / 활용력 등등이 필요하다.
제일 배우기 어렵고 활용하기 어렵다.
때문에 재귀함수를 정복하면 어떤 코드가 와도 분석하는데 두려움이 없어진다.
배열,list를 순회할때는 -> 반복문 (for)
그래프, 트리를 순회하기 위해서는 필수적으로 재귀함수를 사용해야한다.


ex)
아래 코드의 문제점 : 종료 조건이 없다. 때문에 메모리(stack)영역이 가득차서 강재 종료된다.
void sample()
{
	sample();
}

int main(void)
{
	sample();	// stack over flow 발생

	return 0;
}

재귀함수를 어려워하는 이유(단점) : 
	1. 코드자체만봐서는 어떤 방식으로 동작이 이루어지는지 파악이 되지 않는다.
		그래서 잘 사용하지 않는다.
	2. 잘못 사용할 경우 스텍공간이 넘쳐흘러서 강제 종료된다. (두렵)
	3. 배워서 활용하는데 시간이 오래 걸린다. (for문 -> 2주, 재귀 -> 2달)
		그래서 꺼리게된다.
	
재귀함수 사용하면 좋은점(장점) : 
	1. 가독성이 너무 좋아진다.	(코드만 봐서는 동작방식을 바로 이해하기 힘든데 왜 가독성이 좋은가?)
	2. 경우의수를 해결할때 재귀함수를 사용하게 돠면 굉장히 편리하다.
		(느릴 수 있다.)

return 을 만나면 자신을 호출한 함수로 돌아간다. 무조건 main 함수로 돌아간다고 생각하면안된다.
	VS에서 호출스택 란을 확인해보자

[문제]
배열 : 5, 7, 1, 2, 3
재귀함수를 이용하여 정방행, 역방향 출력

풀이)
#include <iostream>
using namespace std; 
/*
void booster(int level)
{
	// q2 : 중단조건이 재귀호출 전에 위치해야한다고 생각하는데 맞는가?
	if (level == 3)
	{
		cout << "current level : " << level << endl;
		return;
	}
	booster(level + 1);
	cout << "current level : " << level << endl;
}

// q1 : 코드만 봐선 어떻게 동작하는지 알기 어렵다고 했는데 왜 가독성이 좋은가?
//		단순히 짧게 구현할 수 있기 때문인가?
int main(void)
{
	int level = 1;
	booster(level);

	return 0;
}
*/

void print(int* arr, int idx)
{
	if (idx == 0)
	{
		cout << arr[idx] << " ";
		return;
	}
	print(arr, idx - 1);
	cout << arr[idx] << " ";
}

void rePrint(int* arr, int idx)
{
	if (idx == 4)
	{
		cout << arr[idx] << " ";
		return;
	}
	rePrint(arr, idx + 1);
	cout << arr[idx] << " ";
}

void solution(int* arr, int idx)
{
	if (idx == 5)
	{
		cout << endl;
		return;
	}
	cout << arr[idx] << " ";
	solution(arr, idx + 1);
	cout << arr[idx] << " ";
}

int main(void)
{
	int arr[5] = { 5,7,1,2,3 };
	/*print(arr, 4);
	cout << endl;
	rePrint(arr, 0);*/

	solution(arr, 0);

	return 0;
}

---[2교시]---

[방향확인 방식]
1. 하드코딩방식
2. Direct 방식(=기법) -> 4x2 배열을 만들어서 반복문으로 계산

[구조체]
구조체 타입으로 배열을 만들 수 있음을 자각하고 있자.

[해쉬 테이블]
= direct address table
개수를 구하고자할 때 사용하기 좋다.
인자로 받은 데이터에 본인만의 공식을 부여하여 인덱스로 만든다.
- 단점 : 서로다른 인자값을 넣었음에도 중복된 인덱스 값이 나올 수 있다.
		이건 아직 지구상에서 해결 할 수 없다.

- 정렬에 활용할 수도 있다.



