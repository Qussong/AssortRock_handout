[23/06/15]

[ C++ 추가 ]
- 상속
- 가상함수
- 오버라이드
- 연산자 오버로딩
- 생성자(복사생성자) / 소멸자

- 다형성, 캡슐화, ...
	-> 굳이 배우면 헷갈린다. 나중에 알아서 터득한다.

[ 수업 진행 방향 ]
1. API 바로 돌입 	-> 포토폴리오 기간 늘어난다.
				
2. 알고리즘 	-> 기본기 향상
			-> 어차피 코딩 테스트 때문에 나중에 다시 해야한다.
			-> DFS, BFS 까먹는다 포폴 후에 다시 해야한다.
			ex) 다익스트라 알고리즘, 정렬 알고리즘

---[질 문]---
- (이진트리 -> 1차배열) 유형의 문제에서 dfs의 구조
	
const int length = 7;
int arr[length] = { 0,1,2,3,4,5,6 };
int path[length] = {};
int pathIdx = 0;

void dfs(int _idx)
{
	if (_idx < length)
	{
		path[pathIdx] = arr[_idx];
		++pathIdx;
		dfs(_idx * 2);
		dfs(_idx * 2 + 1);
		--pathIdx;
		path[pathIdx] = 0;
	}

}

int main(void)
{
	int firstIdx = 1;
	dfs(firstIdx);
	return 0;
}

[ 그래프 탐색 ]
1. DFS
- 방문한 곳을 체크해주기만 하면 된다.
2. BFS
- 큐를 활용한다.
- 노드가 자신에게 오기까지의 경로를 가지고 있어야한다는 특징이 있다.
- 방문한곳의 체크는 노드가 가지고 있는 경로를 통해서 한다.
- 노드가 가지고 있는 배열은 memcpy(targetArr, sourceArr, arrSize) 을 통해 복사해준다. (arrSize = sizeof(arr) * arrLen)

[트리 vs 그래프]
- 트리는 순회가 없다.
- 트리는 단방향이다.
- 그래프는 순회가 없을 수 있다.
- 단방향 그래프 == 트리

[트리]
- 트리는 언제 어디서라도 할 수 있도록 할 것
- 트리 구현방법
	1. 리스트
	2. 인접행렬
	3. 일차원 배열