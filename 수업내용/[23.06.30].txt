[23/06/30]

-	동일 프로그램이라도 시간 개념을 넣어주지 않으면 컴퓨터 성능에 따라 속도가 달라져버린다.
	이를 해결 하기 위해서 '시간' 개념을 넣어준다.
[ 수행 ]
1. High Level Interface 아래 Time 필터 추가 -> Time 클래스 생성

2. Time class 멤버 선언
	public:
		static void Init()
		static Update()
		static Render(HDC hdc)
		static float DeltaTime();

	private:
		static LARGE_INTEGER mCpuFrequency = {};	// 구조체, CPU의 고유진동수 저장
		static LARGE_INTEGER mPrevFrequency = {}; 	// 프로그램이 시작되었을때의 진동수 저장
		static LARGE_INTEGER mCurFrequency = {};	// 컴퓨터의 현재 진동수를 가져온다.
	
		float mDeltaTime = 0.0f
		
3. Time class 정의하기
 
4. vanApllication.cpp 에 시간개념 넣어준다.

[ 델타 타임 ]
- 30 Frame이란 : 1초에 30번 업데이트 하는 프로그램
- 델타 타임이란 시간 차이를 의미한다 dt = d1(기준시간) - d2
- 델타 타임이 없으면 컴퓨터 성능에 따라 캐릭터의 속도가 차이날 수 있다.
- 3가지 변수가 필요하다.

[ LARGE_INTEGER ]
- 16바이트 구조체 
- 시간의 값 크기가 엄청 크기에 사용한다.
- long long 타입 변수 2개가 들어가있다.
-  이 둘을 묶어서 PartQuadPart(= Lowpart+High) 라고 말한다.

[ CPU 고유 진동 ]
- 좋은 CPU 일수록 고유 진동수가 증가한다.

[ QueryPerformanceFrequency() ]
- CPU의 고유진동수를 가져온다.

[ static_cast<float> ]
- 잘못된 값이 나올 경우 0으로 나오도록 해준다.
- 앞으로 (float) 방식의 cast는 잘 사용하지 않는다.

[시간 구하는 법]
= (현재 지동수 - 프로그램이 시작될떄의 진동수) / CPU의 고유 진동수

[ 자료형 ]
https://melonicedlatte.com/algorithm/2018/03/04/022437.html

[ uinon ]
- 자료형 두개를 합쳐준다?

[ 프레임 ]
 = 1 / 델타타임
 
ex) 델타 타임 = 0.1 이면 10 Frame

[ TextOut() ]
- 화면에 텍스트 출력해주는 함수?

[ 숙제 ]
- 물체가 혼자 움직일 수 있도록 구현하기(방향은 random)
- 벽에 부딪히면 튕기도록
- 여러개의 공이 움직이도록 하기 (공끼리 튕길 필요는 없다.)