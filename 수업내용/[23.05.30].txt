[23/05/30]

---[ 질문 ]---

- 링크드 리스트 는 for문을 사용해 돈다
- 그래프, 트리 는 for문으로 돌지 않는다. DFS를 통해 순회할 수 있다.
	BFS 라는 방법을 통해서 돌수도 있다.
- 자료구조는 크게 4가지가 있다.
- 그래프, 트리를 이해하지 못하면 코딩테스트 문재는 손도 못건든다.
- [포포TV] "취업 전에 반드시 알아야 하는 자료구조들" 참고하기

---[ 1교시 ]---

[트리]
- 트리를 순회할때도 for문처럼 원하는 값이 나오면 순회를 멈추도록 해보자
	1. 진입후 가지치기하는 방식
	2. 진입하지 않는 가지치기 방식
- 가지치기를 하면 프로그램 선응에 긍정적인 영향을 준다.
- 가지치기는 정확한 조건에서 if문을 정확한 위치에 적어주는 것이 중요하다.

- 중복이 허용되지 않는 경우의 수를 출력하는 트리를 만들어보자.
- ex) https://octagonal-colt-882.notion.site/23-05-30_tree_-x-a0097c7c8f1c4c77976b65496e4f2f97


---[2교시]---

[배열]
- 단점
	1. 중간에 위치한 값을 삭제하면 해당 원소의 뒤에 위치한 인덱스의 값들을 전부 앞으로 당겨줘야한다.
	2. 정해진 배열의 크기를 넘어가게되면 더 큰 크기의 배열을 만들어서 옮겨줘야한다.
	
	즉, 배열은 삽입삭제에 불편한점이 있다.
	
[링크드 리스트]
- 사용하는 경우 : 
	중간에 데이터가 삭제 또는 삽입이 자주 일어날 때 링크드리스트를 활용하면 속도에서 이점이 생긴다.
	하지만, 삽입삭제가 가끔일어난다면 배열이 훨씬 빠르다.
	

- 해당 노드의 값과, 다음 노드의 값을 가지고 있다.
- 마지막 노드의 값은 'nullptr' 이다.
- 제일 앞 노드의 이름은 'head'
- 구조체(=클래스)에 한해서는 '->'연산자를 사용할 수 있다.
	ex)
		(*head).val == head->val
	[이점]
	1. 사용의 편리함
	2. 가독성 향상
- '.' 과 '->'을 덜 헷갈리는 방법 : 
	구조체를 가리키는 변수 자체라면 '.'을 통해 멤버에 접근하면 되고,
	구조체를 가리키는 포인터라면 고민없이 '->'을 사용하여 멤버에 접근한다.

[Plan]

